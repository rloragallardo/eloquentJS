Ejercicios
-----------------------------------------------------------------------------------
Mínimo
El capítulo previo presentó la función estándar Math.min que devuelve su menor
argumento. Ahora podemos escribir una función como esa nosotros mismos.
Define la función min que toma dos argumentos y devuelve su mínimo.
-----------------------------------------------------------------------------------
Recursión
Hemos visto que podemos usar % (el operador de resto) para verificar si un
número es par o impar al usar % 2 para ver si es divisible por dos. Aquí hay
otra forma de definir si un número entero positivo es par o impar:
• El cero es par.
• El uno es impar.
• Para cualquier otro número N, su paridad es la misma que N - 2.
Define una función recursiva isEven que corresponda a esta descripción. La
función debe aceptar un solo parámetro (un número entero positivo) y devolver
un booleano.
Pruébalo con 50 y 75. Observa cómo se comporta con -1. ¿Por qué? ¿Puedes
pensar en una forma de solucionarlo?
-----------------------------------------------------------------------------------

Contando frijoles
Puedes obtener el *ésimo carácter, o letra, de una cadena escribiendo [N] después
de la cadena (por ejemplo, cadena[2]). El valor resultante será una
cadena que contiene solo un carácter (por ejemplo, "b"). El primer carácter
tiene la posición 0, lo que hace que el último se encuentre en la posición cadena
.length - 1. En otras palabras, una cadena de dos caracteres tiene longitud
2, y sus caracteres tienen posiciones 0 y 1.
Escribe una función contarBs que tome una cadena como único argumento
y devuelva un número que indique cuántos caracteres B en mayúscula hay en
la cadena.
A continuación, escribe una función llamada contarCaracter que se comporte
como contarBs, excepto que toma un segundo argumento que indica el
carácter que se va a contar (en lugar de contar solo caracteres B en mayúscula).
Reescribe contarBs para hacer uso de esta nueva función.